package main

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */

import (
	"fmt"
	"projectEuler/common/commonintutils"
)

func main() {
	var maxValue int64 = 4000000
	fmt.Println(fmt.Sprintf("Finding sum of even Fibonacci below maxValue = %v", maxValue))

	//get evens
	evenTerms := getEvens(genSequence(maxValue))
	fmt.Println(fmt.Sprintf("even Fibonacci terms: %v", evenTerms))

	//sum evens
	sumOfTerms := commonintutils.SumInt64Slice(evenTerms)
	fmt.Println(fmt.Sprintf("Sum of terms: %v", sumOfTerms))
}

func genSequence(maxValue int64) (fibSlice []int64) {
	if maxValue < 1 {
		return fibSlice
	}
	if maxValue == 1 {
		return append(fibSlice, 1)
	}
	var previous int64 = 1
	var current int64 = 2
	fibSlice = append(fibSlice, []int64{previous, current}...)
	for {
		next := previous + current
		if next > maxValue {
			return fibSlice
		}
		fibSlice = append(fibSlice, next)
		previous = current
		current = next
	}
}

func getEvens(fibSlice []int64) (retSlice []int64) {
	for _, fib := range fibSlice {
		if fib%2 == 0 {
			retSlice = append(retSlice, fib)
		}
	}
	return retSlice
}
