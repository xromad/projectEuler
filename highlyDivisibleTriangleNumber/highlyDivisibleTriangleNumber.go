package main

/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

import (
	"fmt"
)

// TriangleNumber - a triangle number
type TriangleNumber struct {
	value   int64
	lastInt int64
}

func main() {
	getTriangleNumber(500)
}

func getTriangleNumber(divisorCount int) (divisors []int64, t TriangleNumber) {
	fmt.Println(fmt.Sprintf("Find Triangle number with %v divisors", divisorCount))
	for len(divisors) <= divisorCount {
		t = getNextTriangle(t)
		divisors = getFactors(t.value)
	}
	fmt.Println(fmt.Sprintf("divisors: %v, triangle number: %v:", divisors, t.value))
	return
}

func getFactors(n int64) (factors []int64) {
	for f := int64(1); f <= n; f++ {
		if n%f == 0 {
			factors = append(factors, f)
		}
	}
	return
}

func getNextTriangle(prev TriangleNumber) TriangleNumber {
	return TriangleNumber{prev.value + prev.lastInt + 1, prev.lastInt + 1}
}
